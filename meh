int prioridadeTipo(char *first, char *second){//verifica as prioridades entre os tipos
	if(0 == strcmp(second, "double") && strcmp(first, "double")){ // segundo double e primeiro diferente de double
		return 0;
	} 
	else if(0 == strcmp(first, "double") && strcmp(second, "double")){ // primeiro double e segundo diferent de double
		return 1;
	} 
	else if(0 == strcmp(first, "i32")){
		return 1;
	} 
	else if(0 == strcmp(second, "i32")){
		return 0;
	}
	return 0;
}

void gerLogical(no *node, char * op, char* opD){
	int local_vars[2];
	char *first_type = (char *)malloc(sizeof(char)*strlen(node->noFilho->exprType));
	strcpy(first_type,node->noFilho->exprType);
	first_type=strtok(first_type,"- "); // expr type do 1ยบ operando
	char *second_type = (char *)malloc(sizeof(char)*strlen(node->noFilho->noIrmao->exprType));
	strcpy(second_type,node->noFilho->noIrmao->exprType);
	second_type=strtok(second_type,"- "); // expr type do 2ยบ operando
	char *type = strdup(first_type);
	if(strcmp(first_type, second_type)!=0){ // tipos diferentes
		int greater = prioridadeTipo(first_type, second_type); // vai obter quais as prioridades certas
		if(greater == 1){  // se o primeiro for maior que o segundo entao temos de converter para o tipo do 1 filho
			if(0 == strcmp(node->noFilho->noIrmao->type, "Id")){ // load da variavel
				printf("%%%d = load %s, %s* ", temporary_var, tipoLLVM(second_type), tipoLLVM(second_type));
				geracaoLLVM(node->noFilho->noIrmao);
				printf("\n");
				local_vars[1] = temporary_var;
				temporary_var++;
			} 
			else if(is_expression(node->noFilho->noIrmao)){ // se for uma expressao tem da ir fazer primeiro
				geracaoLLVM(node->noFilho->noIrmao);
				local_vars[1] = temporary_var-1;
			}
			type = strdup(first_type);
			typeConversion(node->noFilho->noIrmao, first_type); //converte para o tipo esperado
			local_vars[1] = temporary_var-1;
			if(0 == strcmp(node->noFilho->type, "Id")){ //load da variavel
				printf("%%%d = load %s, %s* ", temporary_var, tipoLLVM(first_type), tipoLLVM(first_type));
				geracaoLLVM(node->noFilho);
				printf("\n");
				local_vars[0] = temporary_var;
				temporary_var++;
			} 
			else if(is_expression(node->noFilho)){
				geracaoLLVM(node->noFilho);
				local_vars[0] = temporary_var-1;
			}
		} 
		else { // se o segundo for maior que o primeiro entao temos de converter para o tipo do 2 filho
			if(0 == strcmp(node->noFilho->type, "Id")){
				printf("%%%d = load %s, %s* ", temporary_var, tipoLLVM(first_type), tipoLLVM(first_type));
				geracaoLLVM(node->noFilho);
				printf("\n");
				local_vars[0] = temporary_var;
				temporary_var++;
			} 
			else if(is_expression(node->noFilho)){
				geracaoLLVM(node->noFilho);
				local_vars[0] = temporary_var-1;
			}
			type = strdup(second_type);
			typeConversion(node->noFilho, second_type);
			local_vars[0] = temporary_var-1;
			if(0 == strcmp(node->noFilho->noIrmao->type, "Id")){
				printf("%%%d = load %s, %s* ", temporary_var, tipoLLVM(second_type), tipoLLVM(second_type));
				geracaoLLVM(node->noFilho->noIrmao);
				printf("\n");
				local_vars[1] = temporary_var;
				temporary_var++;
			} else if(is_expression(node->noFilho->noIrmao)){
				geracaoLLVM(node->noFilho->noIrmao);
				local_vars[1] = temporary_var-1;
			}
		}
		if(0 == strcmp(type, "double")){ //se for double entao e preciso por um operador diferente
			if(greater == 1){
				if(0 == strcmp(node->noFilho->type, "Id") || is_expression(node->noFilho)){
					printf("%%%d = %s double %%%d, %%%d\n", temporary_var,opD ,local_vars[0], local_vars[1]);
				} 
				else { // literal
					printf("%%%d = %s double %s, %%%d\n", temporary_var, opD,node->noFilho->id, local_vars[1]);
				}
			} 
			else {
				if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao)){
					printf("%%%d = %s double %%%d, %%%d\n", temporary_var, opD,local_vars[0], local_vars[1]);
				} 
				else { // literal
					printf("%%%d = %s double %%%d, %s\n", temporary_var, opD,local_vars[0], node->noFilho->noIrmao->id);
				}
			}
		} 
		else {
			if(greater == 1){
				if(0 == strcmp(node->noFilho->type, "Id") || is_expression(node->noFilho)){
					printf("%%%d = %s %s %%%d, %%%d\n", temporary_var, op,tipoLLVM(type), local_vars[0], local_vars[1]);
				} 
				else { // literal
					printf("%%%d = %s %s %s, %%%d\n", temporary_var, op,tipoLLVM(type), node->noFilho->id, local_vars[1]);
				}
			} 
			else {
				if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao)){
					printf("%%%d = %s %s %%%d, %%%d\n", temporary_var, op,tipoLLVM(type), local_vars[0], local_vars[1]);
				} 
				else { // literal
					printf("%%%d = %s %s %%%d, %s\n", temporary_var, op,tipoLLVM(type), local_vars[0], node->noFilho->noIrmao->id);
				}
			}
		}
		temporary_var++;
	} 
	else {
		if(0 == strcmp(node->noFilho->type, "Id")){ // se for um id temos de dar load a vairavel
			printf("%%%d = load %s, %s* ", temporary_var, tipoLLVM(first_type),tipoLLVM(first_type));
			geracaoLLVM(node->noFilho);
			printf("\n");
			local_vars[0] = temporary_var;
			temporary_var++;
		} 
		else if(is_expression(node->noFilho)){ // se for expression temos da fazer primeiro
			geracaoLLVM(node->noFilho);
			local_vars[0] = temporary_var-1;
		}
		if(0 == strcmp(node->noFilho->noIrmao->type, "Id")){ // faz o mesmo para o irmao
			printf("%%%d = load %s, %s* ", temporary_var, tipoLLVM(second_type),tipoLLVM(second_type) );
			geracaoLLVM(node->noFilho->noIrmao);
			printf("\n");
			local_vars[1] = temporary_var;
			temporary_var++;
		} 
		else if(is_expression(node->noFilho->noIrmao)){
			geracaoLLVM(node->noFilho->noIrmao);
			local_vars[1] = temporary_var-1;
		}
		//nao e necessario converter nenhuns tipos
		if(0 == strcmp(type, "double")) {
			if(0 == strcmp(node->noFilho->type, "Id") || is_expression(node->noFilho)){
				if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao)){  // Ids no primeiro e segundo operando
					printf("%%%d = %s double %%%d, %%%d\n", temporary_var, opD,local_vars[0], local_vars[1]);
				} 
				else { // id no primeiro operando
					printf("%%%d = %s double %%%d, %s\n", temporary_var, opD,local_vars[0], node->noFilho->noIrmao->id);
				}
			} 
			else if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao)){ // segundo e Id
				printf("%%%d = %s double %s, %%%d\n", temporary_var,opD, node->noFilho->id, local_vars[1]);
			} 
			else { // comparacao de 2 literais
				printf("%%%d = %s double %s, %s\n", temporary_var,opD, node->noFilho->id, node->noFilho->noIrmao->id);
			}
		} 
		else {
			if(0 == strcmp(node->noFilho->type, "Id") || is_expression(node->noFilho)){
				if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao)){  // Ids no primeiro e segundo operando 
					printf("%%%d = %s %s %%%d, %%%d\n", temporary_var, op,tipoLLVM(type), local_vars[0], local_vars[1]);
				} 
				else { //id no primeiro operando 
					printf("%%%d = %s %s %%%d, %s\n", temporary_var,op,tipoLLVM(type), local_vars[0], node->noFilho->noIrmao->id);
				}
			} 
			else if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao)){ // segundo e Id
				printf("%%%d = %s %s %s, %%%d\n", temporary_var, op,tipoLLVM(type),node->noFilho->id, local_vars[1]);
			} 
			else {
				printf("%%%d = %s %s %s, %s\n", temporary_var, tipoLLVM(type),op, node->noFilho->id, node->noFilho->noIrmao->id);
			}
		}
		temporary_var++;
	}	
	printf("%%%d = zext i1 %%%d to i32\n", temporary_var, temporary_var-1); // necessario por(dont know why)
	temporary_var++;
}

void gerNot(no *node){
	char *first_type = (char *)malloc(sizeof(char)*strlen(node->noFilho->exprType));
	strcpy(first_type,node->noFilho->exprType);
	first_type=strtok(first_type,"- "); // expr type do 1ยบ operando
	char *type = tipoLLVM(first_type);
	if(0 == strcmp(node->noFilho->type, "Id")){
		printf("%%%d = load %s, %s* ", temporary_var, type, type);
		geracaoLLVM(node->noFilho);
		printf("\n");
		temporary_var++;
	} 
	else if(is_expression(node->noFilho)){
		geracaoLLVM(node->noFilho);
	}
	if(0 == strcmp(type, "double")){
		if(0 == strcmp(node->noFilho->type, "Id") || is_expression(node->noFilho)) {
			printf("%%%d = fcmp une double %%%d, 0.000000e+00\n", temporary_var, temporary_var-1);
		} 
		else {
			printf("%%%d = fcmp une double %s, 0.000000e+00\n", temporary_var, node->noFilho->id);
		}
	} 
	else {
		if(0 == strcmp(node->noFilho->type, "Id") || is_expression(node->noFilho)) {
			printf("%%%d = icmp ne %s %%%d, 0\n", temporary_var, type, temporary_var-1);
		} 
		else {
			printf("%%%d = icmp ne %s %s, 0\n", temporary_var, type, node->noFilho->id);
		}
	}
	temporary_var++;
	printf("%%%d = xor i1 %%%d, true\n", temporary_var, temporary_var-1);
	temporary_var++;
	printf("%%%d = zext i1 %%%d to i32\n", temporary_var, temporary_var-1);
	temporary_var++;
}

void gerOr(no *node,char * op){
	or_cmp++;
	printf("\nbr label %%orfalse%d\n", or_cmp-1);
	printf("orfalse%d:\n", or_cmp-1);
	if(0 == strcmp(node->noFilho->type, "Id")){
		printf("%%%d = load %s, %s* ", temporary_var, tipoLLVM(node->noFilho->type), tipoLLVM(node->noFilho->type));
		geracaoLLVM(node->noFilho);
		printf("\n");
		temporary_var++;
		if(0 == strcmp(tipoLLVM(node->noFilho->type), "double")){
			printf("%%%d = fcmp une double %%%d, 0.000000e+00\n", temporary_var, temporary_var-1);
		} else {
			if(strcmp(tipoLLVM(node->noFilho->type), "i32")){
				typeConversion(node->noFilho, "i32");
			}
			printf("%%%d = icmp ne i32 %%%d, 0\n", temporary_var, temporary_var-1);
		}
		temporary_var++;
	} else if(0 == strcmp(node->noFilho->type, "IntLit") || 0 == strcmp(node->noFilho->type, "ChrLit") || 0 == strcmp(node->noFilho->type, "RealLit")){
		if(0 == strcmp(tipoLLVM(node->noFilho->type), "double")){
			printf("%%%d = fcmp une double %s, 0.000000e+00\n", temporary_var, node->noFilho->id);
		} else {
			if(strcmp(tipoLLVM(node->noFilho->type), "i32")){
				typeConversion(node->noFilho, "i32");
				printf("%%%d = icmp ne i32 %%%d, 0\n", temporary_var, temporary_var-1);
			} else {
				printf("%%%d = icmp ne i32 %s, 0\n", temporary_var, node->noFilho->id);
			}	
		}
		temporary_var++;
	} else {
		geracaoLLVM(node->noFilho);
		if(0 == strcmp(tipoLLVM(node->noFilho->type), "double")){
			printf("%%%d = fcmp une double %%%d, 0.000000e+00\n", temporary_var, temporary_var-1);
		} else {
			if(strcmp(tipoLLVM(node->noFilho->type), "i32")){
				typeConversion(node->noFilho, "i32");
			}
			printf("%%%d = icmp ne i32 %%%d, 0\n", temporary_var, temporary_var-1);
		}
		temporary_var++;
	}
	printf("br i1 %%%d, label %%orend%d, label %%ortrue%d\n", temporary_var-1, or_cmp-1, or_cmp-1);
	printf("ortrue%d:\n", or_cmp-1);
	if(0 == strcmp(node->noFilho->noIrmao->type, "Id")){
		printf("%%%d = load %s, %s* ", temporary_var, tipoLLVM(node->noFilho->noIrmao->type), tipoLLVM(node->noFilho->noIrmao->type));
		geracaoLLVM(node->noFilho->noIrmao);
		printf("\n");
		temporary_var++;
		if(0 == strcmp(tipoLLVM(node->noFilho->noIrmao->type), "double")){
			printf("%%%d = fcmp une double %%%d, 0.000000e+00\n", temporary_var, temporary_var-1);
		} else {
			if(strcmp(tipoLLVM(node->noFilho->noIrmao->type), "i32")){
				typeConversion(node->noFilho->noIrmao, "i32");
			}
			printf("%%%d = icmp ne i32 %%%d, 0\n", temporary_var, temporary_var-1);
		}
		temporary_var++;
	} else if(0 == strcmp(node->noFilho->noIrmao->type, "IntLit") || 0 == strcmp(node->noFilho->noIrmao->type, "ChrLit") || 0 == strcmp(node->noFilho->noIrmao->type, "RealLit")){
		if(0 == strcmp(tipoLLVM(node->noFilho->noIrmao->type), "double")){
			printf("%%%d = fcmp une double %s, 0.000000e+00\n", temporary_var, node->noFilho->noIrmao->id);
		} else {
			if(strcmp(tipoLLVM(node->noFilho->noIrmao->type), "i32")){
				typeConversion(node->noFilho->noIrmao, "i32");
				printf("%%%d = icmp ne i32 %%%d, 0\n", temporary_var, temporary_var-1);
			} else {
				printf("%%%d = icmp ne i32 %s, 0\n", temporary_var, node->noFilho->noIrmao->id);
			}	
		}
		temporary_var++;
	} else {
		geracaoLLVM(node->noFilho->noIrmao);
		if(0 == strcmp(tipoLLVM(node->noFilho->noIrmao->type), "double")){
			printf("%%%d = fcmp une double %%%d, 0.000000e+00\n", temporary_var, temporary_var-1);
		} else {
			if(strcmp(tipoLLVM(node->noFilho->noIrmao->type), "i32")){
				typeConversion(node->noFilho->noIrmao, "i32");
			}
			printf("%%%d = icmp ne i32 %%%d, 0\n", temporary_var, temporary_var-1);
		}
		temporary_var++;
	}
	printf("br label %%orend%d\n", or_cmp-1);
	printf("orend%d:\n", or_cmp-1);
	printf("%%%d = phi i1 [ true, %%orfalse%d ], [ %%%d, %%ortrue%d ]\n", temporary_var, or_cmp-1, temporary_var-1, or_cmp-1);
	temporary_var++;
	printf("%%%d = zext i1 %%%d to i32\n", temporary_var, temporary_var-1);
	temporary_var++;
}

void gerAnd(no *node){
	and_cmp++;
	printf("\nbr label %%andfalse%d\n", and_cmp-1);
	printf("andfalse%d:\n", and_cmp-1);
	if(0 == strcmp(node->noFilho->type, "Id")){
		printf("%%%d = load %s, %s* ", temporary_var, tipoLLVM(node->noFilho->type), tipoLLVM(node->noFilho->type));
		geracaoLLVM(node->noFilho);
		printf("\n");
		temporary_var++;
		if(0 == strcmp(tipoLLVM(node->noFilho->type), "double")){
			printf("%%%d = fcmp une double %%%d, 0.000000e+00\n", temporary_var, temporary_var-1);
		} else {
			if(strcmp(tipoLLVM(node->noFilho->type), "i32")){
				typeConversion(node->noFilho, "i32");
			}
			printf("%%%d = icmp ne i32 %%%d, 0\n", temporary_var, temporary_var-1);
		}
		temporary_var++;
	} else if(0 == strcmp(node->noFilho->type, "IntLit") || 0 == strcmp(node->noFilho->type, "ChrLit") || 0 == strcmp(node->noFilho->type, "RealLit")){
		if(0 == strcmp(tipoLLVM(node->noFilho->type), "double")){
			printf("%%%d = fcmp une double %s, 0.000000e+00\n", temporary_var, node->noFilho->id);
		} else {
			if(strcmp(tipoLLVM(node->noFilho->type), "i32")){
				typeConversion(node->noFilho, "i32");
				printf("%%%d = icmp ne i32 %%%d, 0\n", temporary_var, temporary_var-1);
			} else {
				printf("%%%d = icmp ne i32 %s, 0\n", temporary_var, node->noFilho->id);
			}	
		}
		temporary_var++;
	} else {
		geracaoLLVM(node->noFilho);
		if(0 == strcmp(tipoLLVM(node->noFilho->type), "double")){
			printf("%%%d = fcmp une double %%%d, 0.000000e+00\n", temporary_var, temporary_var-1);
		} else {
			if(strcmp(tipoLLVM(node->noFilho->type), "i32")){
				typeConversion(node->noFilho, "i32");
			}
			printf("%%%d = icmp ne i32 %%%d, 0\n", temporary_var, temporary_var-1);
		}
		temporary_var++;
	}
	printf("br i1 %%%d, label %%andtrue%d, label %%andend%d\n", temporary_var-1, and_cmp-1, and_cmp-1);
	printf("\nandtrue%d:\n", and_cmp-1);
	if(0 == strcmp(node->noFilho->noIrmao->type, "Id")){
		printf("%%%d = load %s, %s* ", temporary_var, tipoLLVM(node->noFilho->noIrmao->type), tipoLLVM(node->noFilho->noIrmao->type));
		geracaoLLVM(node->noFilho->noIrmao);
		printf("\n");
		temporary_var++;
		if(0 == strcmp(tipoLLVM(node->noFilho->noIrmao->type), "double")){
			printf("%%%d = fcmp une double %%%d, 0.000000e+00\n", temporary_var, temporary_var-1);
		} else {
			if(strcmp(tipoLLVM(node->noFilho->noIrmao->type), "i32")){
				typeConversion(node->noFilho->noIrmao, "i32");
			}
			printf("%%%d = icmp ne i32 %%%d, 0\n", temporary_var, temporary_var-1);
		}
		temporary_var++;
	} else if(0 == strcmp(node->noFilho->noIrmao->type, "IntLit") || 0 == strcmp(node->noFilho->noIrmao->type, "ChrLit") || 0 == strcmp(node->noFilho->noIrmao->type, "RealLit")){
		if(0 == strcmp(tipoLLVM(node->noFilho->noIrmao->type), "double")){
			printf("%%%d = fcmp une double %s, 0.000000e+00\n", temporary_var, node->noFilho->noIrmao->id);
		} else {
			if(strcmp(tipoLLVM(node->noFilho->noIrmao->type), "i32")){
				typeConversion(node->noFilho->noIrmao, "i32");
				printf("%%%d = icmp ne i32 %%%d, 0\n", temporary_var, temporary_var-1);
			} else {
				printf("%%%d = icmp ne i32 %s, 0\n", temporary_var, node->noFilho->noIrmao->id);
			}	
		}
		temporary_var++;
	} else {
		geracaoLLVM(node->noFilho->noIrmao);
		if(0 == strcmp(tipoLLVM(node->noFilho->noIrmao->type), "double")){
			printf("%%%d = fcmp une double %%%d, 0.000000e+00\n", temporary_var, temporary_var-1);
		} else {
			if(strcmp(tipoLLVM(node->noFilho->noIrmao->type), "i32")){
				typeConversion(node->noFilho->noIrmao, "i32");
			}
			printf("%%%d = icmp ne i32 %%%d, 0\n", temporary_var, temporary_var-1);
		}
		temporary_var++;
	}
	printf("br label %%andend%d\n", and_cmp-1);
	printf("\nandend%d:\n", and_cmp-1);
	printf("%%%d = phi i1 [ false, %%andfalse%d ], [ %%%d, %%andtrue%d ]\n", temporary_var, and_cmp-1, temporary_var-1, and_cmp-1);
	temporary_var++;
	printf("%%%d = zext i1 %%%d to i32\n", temporary_var, temporary_var-1);
	temporary_var++;
}
