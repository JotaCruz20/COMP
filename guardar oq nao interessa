void gerAdd(no *node){
	int local_vars[2];
	char *first_type = node->noFilho->type;
	char *second_type = node->noFilho->noIrmao->type;
	char *result_type = types_to_llvm(node->type);
	if(0 == strcmp(node->noFilho->type, "Id")){
		printf("%%%d = load %s, %s* ", temporary_var, types_to_llvm(first_type), types_to_llvm(first_type));
		geracaoLLVM(node->noFilho);
		printf("\n");
		local_vars[0] = temporary_var;
		temporary_var++;
		if(strcmp(types_to_llvm(first_type), result_type)){
			convert_types(node->noFilho, result_type);
			local_vars[0] = temporary_var-1;
		}
	} else if(is_expression(node->noFilho)){
		geracaoLLVM(node->noFilho);
		if(strcmp(types_to_llvm(first_type), result_type)){
			convert_types(node->noFilho, result_type);
		}
		local_vars[0] = temporary_var-1;
	}		
	if(0 == strcmp(node->noFilho->noIrmao->type, "Id")){
		printf("%%%d = load %s, %s* ", temporary_var, types_to_llvm(second_type), types_to_llvm(second_type));
		geracaoLLVM(node->noFilho->noIrmao);
		printf("\n");
		local_vars[1] = temporary_var;
		temporary_var++;
		if(strcmp(types_to_llvm(second_type), result_type)){
			convert_types(node->noFilho->noIrmao, result_type);
			local_vars[1] = temporary_var-1;
		}
	} else if(is_expression(node->noFilho->noIrmao)){
		geracaoLLVM(node->noFilho->noIrmao);
		if(strcmp(types_to_llvm(second_type), result_type)){
			convert_types(node->noFilho->noIrmao, result_type);
		}
		local_vars[1] = temporary_var-1;
	}
	if(0 == strcmp(node->noFilho->type, "Id") || is_expression(node->noFilho) || 0 == strcmp(first_type, result_type)){ /* First is ID or different type */
		if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao) || 0 == strcmp(second_type, result_type)){ /* First + Second is ID or different type*/
			if(0 == strcmp(result_type, "double")){
				printf("%%%d = fadd %s %%%d, %%%d\n", temporary_var, result_type, local_vars[0], local_vars[1]);
			} else {
				printf("%%%d = add %s %%%d, %%%d\n", temporary_var, result_type, local_vars[0], local_vars[1]);
			}
		} else {
			if(0 == strcmp(result_type, "double")){
				printf("%%%d = fadd %s %%%d, ", temporary_var, result_type, local_vars[0]);
			} else {
				printf("%%%d = add %s %%%d, ", temporary_var, result_type, local_vars[0]);
			}
			geracaoLLVM(node->noFilho); 
			printf("\n");
		}
	} else if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao) || 0 == strcmp(second_type, result_type)){  /* Second is ID */
		if(0 == strcmp(result_type, "double")){
			printf("%%%d = fadd %s ", temporary_var, result_type);
		} else {
			printf("%%%d = add %s ", temporary_var, result_type);	
		}
		geracaoLLVM(node->noFilho); 
		printf(", %%%d\n", local_vars[1]);
	} else { /* None is ID */
		if(0 == strcmp(result_type, "double")){
			printf("%%%d = fadd %s ", temporary_var, result_type);	
		} else {
			printf("%%%d = add %s ", temporary_var, result_type);	
		}
		geracaoLLVM(node->noFilho);
		printf(", ");
		geracaoLLVM(node->noFilho->noIrmao);
		printf("\n");
	}
	temporary_var++;
}

void gerSub(no *node){
	int local_vars[2];
	char *first_type = node->noFilho->type;
	char *second_type = node->noFilho->noIrmao->type;
	char *result_type = types_to_llvm(node->type);
	if(0 == strcmp(node->noFilho->type, "Id")){
		printf("%%%d = load %s, %s* ", temporary_var, types_to_llvm(first_type), types_to_llvm(first_type));
		geracaoLLVM(node->noFilho);
		printf("\n");
		local_vars[0] = temporary_var;
		temporary_var++;
		if(strcmp(types_to_llvm(first_type), result_type)){
			convert_types(node->noFilho, result_type);
			local_vars[0] = temporary_var-1;
		}
	} else if(is_expression(node->noFilho)){
		geracaoLLVM(node->noFilho);
		local_vars[0] = temporary_var-1;
	}		
	if(0 == strcmp(node->noFilho->noIrmao->type, "Id")){
		printf("%%%d = load %s, %s* ", temporary_var, types_to_llvm(second_type), types_to_llvm(second_type));
		geracaoLLVM(node->noFilho->noIrmao);
		printf("\n");
		local_vars[1] = temporary_var;
		temporary_var++;
		if(strcmp(types_to_llvm(second_type), result_type)){
			convert_types(node->noFilho->noIrmao, result_type);
			local_vars[1] = temporary_var-1;
		}
	} else if(is_expression(node->noFilho->noIrmao)){
		geracaoLLVM(node->noFilho->noIrmao);
		local_vars[1] = temporary_var-1;
	}
	if(0 == strcmp(node->noFilho->type, "Id") || is_expression(node->noFilho) || 0 == strcmp(first_type, result_type)){ /* First is ID or different type */
		if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao) || 0 == strcmp(second_type, result_type)){ /* First + Second is ID or different type*/
			if(0 == strcmp(result_type, "double")){
				printf("%%%d = fsub %s %%%d, %%%d\n", temporary_var, result_type, local_vars[0], local_vars[1]);
			} else {
				printf("%%%d = sub %s %%%d, %%%d\n", temporary_var, result_type, local_vars[0], local_vars[1]);
			}
		} else {
			if(0 == strcmp(result_type, "double")){
				printf("%%%d = fsub %s %%%d, ", temporary_var, result_type, local_vars[0]);
			} else {
				printf("%%%d = sub %s %%%d, ", temporary_var, result_type, local_vars[0]);
			}
			geracaoLLVM(node->noFilho); 
			printf("\n");
		}
	} else if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao) || 0 == strcmp(second_type, result_type)){  /* Second is ID */
		if(0 == strcmp(result_type, "double")){
			printf("%%%d = fsub %s ", temporary_var, result_type);
		} else {
			printf("%%%d = sub %s ", temporary_var, result_type);	
		}
		geracaoLLVM(node->noFilho); 
		printf(", %%%d\n", local_vars[1]);
	} else { /* None is ID */
		if(0 == strcmp(result_type, "double")){
			printf("%%%d = fsub %s ", temporary_var, result_type);	
		} else {
			printf("%%%d = sub %s ", temporary_var, result_type);	
		}
		geracaoLLVM(node->noFilho);
		printf(", ");
		geracaoLLVM(node->noFilho->noIrmao);
		printf("\n");
	}
	temporary_var++;
}

void gerMul(no *node){
	int local_vars[2];
	char *first_type = node->noFilho->type;
	char *second_type = node->noFilho->noIrmao->type;
	char *result_type = types_to_llvm(node->type);
	if(0 == strcmp(node->noFilho->type, "Id")){
		printf("%%%d = load %s, %s* ", temporary_var, types_to_llvm(first_type), types_to_llvm(first_type));
		geracaoLLVM(node->noFilho);
		printf("\n");
		local_vars[0] = temporary_var;
		temporary_var++;
		if(strcmp(types_to_llvm(first_type), result_type)){
			convert_types(node->noFilho, result_type);
			local_vars[0] = temporary_var-1;
		}
	} else if(is_expression(node->noFilho)){
		geracaoLLVM(node->noFilho);
		local_vars[0] = temporary_var-1;
	}		
	if(0 == strcmp(node->noFilho->noIrmao->type, "Id")){
		printf("%%%d = load %s, %s* ", temporary_var, types_to_llvm(second_type), types_to_llvm(second_type));
		geracaoLLVM(node->noFilho->noIrmao);
		printf("\n");
		local_vars[1] = temporary_var;
		temporary_var++;
		if(strcmp(types_to_llvm(second_type), result_type)){
			convert_types(node->noFilho->noIrmao, result_type);
			local_vars[1] = temporary_var-1;
		}
	} else if(is_expression(node->noFilho->noIrmao)){
		geracaoLLVM(node->noFilho->noIrmao);
		local_vars[1] = temporary_var-1;
	}
	if(0 == strcmp(node->noFilho->type, "Id") || is_expression(node->noFilho) || 0 == strcmp(first_type, result_type)){ /* First is ID or different type */
		if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao) || 0 == strcmp(second_type, result_type)){ /* First + Second is ID or different type*/
			if(0 == strcmp(result_type, "double")){
				printf("%%%d = fmul %s %%%d, %%%d\n", temporary_var, result_type, local_vars[0], local_vars[1]);
			} else {
				printf("%%%d = mul %s %%%d, %%%d\n", temporary_var, result_type, local_vars[0], local_vars[1]);
			}
		} else {
			if(0 == strcmp(result_type, "double")){
				printf("%%%d = fmul %s %%%d, ", temporary_var, result_type, local_vars[0]);
			} else {
				printf("%%%d = mul %s %%%d, ", temporary_var, result_type, local_vars[0]);
			}
			geracaoLLVM(node->noFilho); 
			printf("\n");
		}
	} else if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao) || 0 == strcmp(second_type, result_type)){  /* Second is ID */
		if(0 == strcmp(result_type, "double")){
			printf("%%%d = fmul %s ", temporary_var, result_type);
		} else {
			printf("%%%d = mul %s ", temporary_var, result_type);	
		}
		geracaoLLVM(node->noFilho); 
		printf(", %%%d\n", local_vars[1]);
	} else { /* None is ID */
		if(0 == strcmp(result_type, "double")){
			printf("%%%d = fmul %s ", temporary_var, result_type);	
		} else {
			printf("%%%d = mul %s ", temporary_var, result_type);	
		}
		geracaoLLVM(node->noFilho);
		printf(", ");
		geracaoLLVM(node->noFilho->noIrmao);
		printf("\n");
	}
	temporary_var++;
}

void gerDiv(no *node){
	int local_vars[2];
	char *first_type = node->noFilho->type;
	char *second_type = node->noFilho->noIrmao->type;
	char *result_type = types_to_llvm(node->type);
	if(0 == strcmp(node->noFilho->type, "Id")){
		printf("%%%d = load %s, %s* ", temporary_var, types_to_llvm(first_type), types_to_llvm(first_type));
		geracaoLLVM(node->noFilho);
		printf("\n");
		local_vars[0] = temporary_var;
		temporary_var++;
		if(strcmp(types_to_llvm(first_type), result_type)){
			convert_types(node->noFilho, result_type);
			local_vars[0] = temporary_var-1;
		}
	} else if(is_expression(node->noFilho)){
		geracaoLLVM(node->noFilho);
		local_vars[0] = temporary_var-1;
	}		
	if(0 == strcmp(node->noFilho->noIrmao->type, "Id")){
		printf("%%%d = load %s, %s* ", temporary_var, types_to_llvm(second_type), types_to_llvm(second_type));
		geracaoLLVM(node->noFilho->noIrmao);
		printf("\n");
		local_vars[1] = temporary_var;
		temporary_var++;
		if(strcmp(types_to_llvm(second_type), result_type)){
			convert_types(node->noFilho->noIrmao, result_type);
			local_vars[1] = temporary_var-1;
		}
	} else if(is_expression(node->noFilho->noIrmao)){
		geracaoLLVM(node->noFilho->noIrmao);
		local_vars[1] = temporary_var-1;
	}
	if(0 == strcmp(node->noFilho->type, "Id") || is_expression(node->noFilho) || 0 == strcmp(first_type, result_type)){ /* First is ID or different type */
		if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao) || 0 == strcmp(second_type, result_type)){ /* First + Second is ID or different type*/
			if(0 == strcmp(result_type, "double")){
				printf("%%%d = fdiv %s %%%d, %%%d\n", temporary_var, result_type, local_vars[0], local_vars[1]);
			} else {
				printf("%%%d = sdiv %s %%%d, %%%d\n", temporary_var, result_type, local_vars[0], local_vars[1]);
			}
		} else {
			if(0 == strcmp(result_type, "double")){
				printf("%%%d = fdiv %s %%%d, ", temporary_var, result_type, local_vars[0]);
			} else {
				printf("%%%d = sdiv %s %%%d, ", temporary_var, result_type, local_vars[0]);
			}
			geracaoLLVM(node->noFilho); 
			printf("\n");
		}
	} else if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao) || 0 == strcmp(second_type, result_type)){  /* Second is ID */
		if(0 == strcmp(result_type, "double")){
			printf("%%%d = fdiv %s ", temporary_var, result_type);
		} else {
			printf("%%%d = sdiv %s ", temporary_var, result_type);	
		}
		geracaoLLVM(node->noFilho); 
		printf(", %%%d\n", local_vars[1]);
	} else { /* None is ID */
		if(0 == strcmp(result_type, "double")){
			printf("%%%d = fdiv %s ", temporary_var, result_type);	
		} else {
			printf("%%%d = sdiv %s ", temporary_var, result_type);	
		}
		geracaoLLVM(node->noFilho);
		printf(", ");
		geracaoLLVM(node->noFilho->noIrmao);
		printf("\n");
	}
	temporary_var++;
}

void gerMod(no *node){
	int local_vars[2];
	char *first_type = node->noFilho->type;
	char *second_type = node->noFilho->noIrmao->type;
	char *result_type = types_to_llvm(node->type);
	if(0 == strcmp(node->noFilho->type, "Id")){
		printf("%%%d = load %s, %s* ", temporary_var, types_to_llvm(first_type), types_to_llvm(first_type));
		geracaoLLVM(node->noFilho);
		printf("\n");
		local_vars[0] = temporary_var;
		temporary_var++;
		if(strcmp(types_to_llvm(first_type), result_type)){
			convert_types(node->noFilho, result_type);
			local_vars[0] = temporary_var-1;
		}
	}
	if(0 == strcmp(node->noFilho->noIrmao->type, "Id")){
		printf("%%%d = load %s, %s* ", temporary_var, types_to_llvm(second_type), types_to_llvm(second_type));
		geracaoLLVM(node->noFilho->noIrmao);
		printf("\n");
		local_vars[1] = temporary_var;
		temporary_var++;
		if(strcmp(types_to_llvm(second_type), result_type)){
			convert_types(node->noFilho->noIrmao, result_type);
			local_vars[1] = temporary_var-1;
		}
	}
	if(0 == strcmp(node->noFilho->type, "Id") || 0 == strcmp(first_type, result_type)){ /* First is ID or different type */
		if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || 0 == strcmp(second_type, result_type)){ /* First + Second is ID or different type*/
			printf("%%%d = srem %s %%%d, %%%d\n", temporary_var, result_type, local_vars[0], local_vars[1]);
		} else {
			printf("%%%d = srem %s %%%d, ", temporary_var, result_type, local_vars[0]);
			geracaoLLVM(node->noFilho); 
			printf("\n");
		}
	} else if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || 0 == strcmp(second_type, result_type)){  /* Second is ID */
		printf("%%%d = srem %s ", temporary_var, result_type);
		geracaoLLVM(node->noFilho); 
		printf(", %%%d\n", local_vars[1]);
	} else { /* None is ID */
		printf("%%%d = srem %s ", temporary_var, result_type);
		geracaoLLVM(node->noFilho);
		printf(", ");
		geracaoLLVM(node->noFilho->noIrmao);
		printf("\n");
	}
	temporary_var++;
}

void gerOr(no *node){
	or_cmp++;
	printf("\nbr label %%orfalse%d\n", or_cmp-1);
	printf("orfalse%d:\n", or_cmp-1);
	if(0 == strcmp(node->noFilho->type, "Id")){
		printf("%%%d = load %s, %s* ", temporary_var, types_to_llvm(node->noFilho->type), types_to_llvm(node->noFilho->type));
		geracaoLLVM(node->noFilho);
		printf("\n");
		temporary_var++;
		if(0 == strcmp(types_to_llvm(node->noFilho->type), "double")){
			printf("%%%d = fcmp une double %%%d, 0.000000e+00\n", temporary_var, temporary_var-1);
		} else {
			if(strcmp(types_to_llvm(node->noFilho->type), "i32")){
				convert_types(node->noFilho, "i32");
			}
			printf("%%%d = icmp ne i32 %%%d, 0\n", temporary_var, temporary_var-1);
		}
		temporary_var++;
	} else if(0 == strcmp(node->noFilho->type, "IntLit") || 0 == strcmp(node->noFilho->type, "ChrLit") || 0 == strcmp(node->noFilho->type, "RealLit")){
		if(0 == strcmp(types_to_llvm(node->noFilho->type), "double")){
			printf("%%%d = fcmp une double %s, 0.000000e+00\n", temporary_var, node->noFilho->id);
		} else {
			if(strcmp(types_to_llvm(node->noFilho->type), "i32")){
				convert_types(node->noFilho, "i32");
				printf("%%%d = icmp ne i32 %%%d, 0\n", temporary_var, temporary_var-1);
			} else {
				printf("%%%d = icmp ne i32 %s, 0\n", temporary_var, node->noFilho->id);
			}	
		}
		temporary_var++;
	} else {
		geracaoLLVM(node->noFilho);
		if(0 == strcmp(types_to_llvm(node->noFilho->type), "double")){
			printf("%%%d = fcmp une double %%%d, 0.000000e+00\n", temporary_var, temporary_var-1);
		} else {
			if(strcmp(types_to_llvm(node->noFilho->type), "i32")){
				convert_types(node->noFilho, "i32");
			}
			printf("%%%d = icmp ne i32 %%%d, 0\n", temporary_var, temporary_var-1);
		}
		temporary_var++;
	}
	printf("br i1 %%%d, label %%orend%d, label %%ortrue%d\n", temporary_var-1, or_cmp-1, or_cmp-1);
	printf("ortrue%d:\n", or_cmp-1);
	if(0 == strcmp(node->noFilho->noIrmao->type, "Id")){
		printf("%%%d = load %s, %s* ", temporary_var, types_to_llvm(node->noFilho->noIrmao->type), types_to_llvm(node->noFilho->noIrmao->type));
		geracaoLLVM(node->noFilho->noIrmao);
		printf("\n");
		temporary_var++;
		if(0 == strcmp(types_to_llvm(node->noFilho->noIrmao->type), "double")){
			printf("%%%d = fcmp une double %%%d, 0.000000e+00\n", temporary_var, temporary_var-1);
		} else {
			if(strcmp(types_to_llvm(node->noFilho->noIrmao->type), "i32")){
				convert_types(node->noFilho->noIrmao, "i32");
			}
			printf("%%%d = icmp ne i32 %%%d, 0\n", temporary_var, temporary_var-1);
		}
		temporary_var++;
	} else if(0 == strcmp(node->noFilho->noIrmao->type, "IntLit") || 0 == strcmp(node->noFilho->noIrmao->type, "ChrLit") || 0 == strcmp(node->noFilho->noIrmao->type, "RealLit")){
		if(0 == strcmp(types_to_llvm(node->noFilho->noIrmao->type), "double")){
			printf("%%%d = fcmp une double %s, 0.000000e+00\n", temporary_var, node->noFilho->noIrmao->id);
		} else {
			if(strcmp(types_to_llvm(node->noFilho->noIrmao->type), "i32")){
				convert_types(node->noFilho->noIrmao, "i32");
				printf("%%%d = icmp ne i32 %%%d, 0\n", temporary_var, temporary_var-1);
			} else {
				printf("%%%d = icmp ne i32 %s, 0\n", temporary_var, node->noFilho->noIrmao->id);
			}	
		}
		temporary_var++;
	} else {
		geracaoLLVM(node->noFilho->noIrmao);
		if(0 == strcmp(types_to_llvm(node->noFilho->noIrmao->type), "double")){
			printf("%%%d = fcmp une double %%%d, 0.000000e+00\n", temporary_var, temporary_var-1);
		} else {
			if(strcmp(types_to_llvm(node->noFilho->noIrmao->type), "i32")){
				convert_types(node->noFilho->noIrmao, "i32");
			}
			printf("%%%d = icmp ne i32 %%%d, 0\n", temporary_var, temporary_var-1);
		}
		temporary_var++;
	}
	printf("br label %%orend%d\n", or_cmp-1);
	printf("orend%d:\n", or_cmp-1);
	printf("%%%d = phi i1 [ true, %%orfalse%d ], [ %%%d, %%ortrue%d ]\n", temporary_var, or_cmp-1, temporary_var-1, or_cmp-1);
	temporary_var++;
	printf("%%%d = zext i1 %%%d to i32\n", temporary_var, temporary_var-1);
	temporary_var++;
}

void gerAnd(no *node){
	and_cmp++;
	printf("\nbr label %%andfalse%d\n", and_cmp-1);
	printf("andfalse%d:\n", and_cmp-1);
	if(0 == strcmp(node->noFilho->type, "Id")){
		printf("%%%d = load %s, %s* ", temporary_var, types_to_llvm(node->noFilho->type), types_to_llvm(node->noFilho->type));
		geracaoLLVM(node->noFilho);
		printf("\n");
		temporary_var++;
		if(0 == strcmp(types_to_llvm(node->noFilho->type), "double")){
			printf("%%%d = fcmp une double %%%d, 0.000000e+00\n", temporary_var, temporary_var-1);
		} else {
			if(strcmp(types_to_llvm(node->noFilho->type), "i32")){
				convert_types(node->noFilho, "i32");
			}
			printf("%%%d = icmp ne i32 %%%d, 0\n", temporary_var, temporary_var-1);
		}
		temporary_var++;
	} else if(0 == strcmp(node->noFilho->type, "IntLit") || 0 == strcmp(node->noFilho->type, "ChrLit") || 0 == strcmp(node->noFilho->type, "RealLit")){
		if(0 == strcmp(types_to_llvm(node->noFilho->type), "double")){
			printf("%%%d = fcmp une double %s, 0.000000e+00\n", temporary_var, node->noFilho->id);
		} else {
			if(strcmp(types_to_llvm(node->noFilho->type), "i32")){
				convert_types(node->noFilho, "i32");
				printf("%%%d = icmp ne i32 %%%d, 0\n", temporary_var, temporary_var-1);
			} else {
				printf("%%%d = icmp ne i32 %s, 0\n", temporary_var, node->noFilho->id);
			}	
		}
		temporary_var++;
	} else {
		geracaoLLVM(node->noFilho);
		if(0 == strcmp(types_to_llvm(node->noFilho->type), "double")){
			printf("%%%d = fcmp une double %%%d, 0.000000e+00\n", temporary_var, temporary_var-1);
		} else {
			if(strcmp(types_to_llvm(node->noFilho->type), "i32")){
				convert_types(node->noFilho, "i32");
			}
			printf("%%%d = icmp ne i32 %%%d, 0\n", temporary_var, temporary_var-1);
		}
		temporary_var++;
	}
	printf("br i1 %%%d, label %%andtrue%d, label %%andend%d\n", temporary_var-1, and_cmp-1, and_cmp-1);
	//geracaoLLVM(node->noFilho->noIrmao);
	printf("\nandtrue%d:\n", and_cmp-1);
	if(0 == strcmp(node->noFilho->noIrmao->type, "Id")){
		printf("%%%d = load %s, %s* ", temporary_var, types_to_llvm(node->noFilho->noIrmao->type), types_to_llvm(node->noFilho->noIrmao->type));
		geracaoLLVM(node->noFilho->noIrmao);
		printf("\n");
		temporary_var++;
		if(0 == strcmp(types_to_llvm(node->noFilho->noIrmao->type), "double")){
			printf("%%%d = fcmp une double %%%d, 0.000000e+00\n", temporary_var, temporary_var-1);
		} else {
			if(strcmp(types_to_llvm(node->noFilho->noIrmao->type), "i32")){
				convert_types(node->noFilho->noIrmao, "i32");
			}
			printf("%%%d = icmp ne i32 %%%d, 0\n", temporary_var, temporary_var-1);
		}
		temporary_var++;
	} else if(0 == strcmp(node->noFilho->noIrmao->type, "IntLit") || 0 == strcmp(node->noFilho->noIrmao->type, "ChrLit") || 0 == strcmp(node->noFilho->noIrmao->type, "RealLit")){
		if(0 == strcmp(types_to_llvm(node->noFilho->noIrmao->type), "double")){
			printf("%%%d = fcmp une double %s, 0.000000e+00\n", temporary_var, node->noFilho->noIrmao->id);
		} else {
			if(strcmp(types_to_llvm(node->noFilho->noIrmao->type), "i32")){
				convert_types(node->noFilho->noIrmao, "i32");
				printf("%%%d = icmp ne i32 %%%d, 0\n", temporary_var, temporary_var-1);
			} else {
				printf("%%%d = icmp ne i32 %s, 0\n", temporary_var, node->noFilho->noIrmao->id);
			}	
		}
		temporary_var++;
	} else {
		geracaoLLVM(node->noFilho->noIrmao);
		if(0 == strcmp(types_to_llvm(node->noFilho->noIrmao->type), "double")){
			printf("%%%d = fcmp une double %%%d, 0.000000e+00\n", temporary_var, temporary_var-1);
		} else {
			if(strcmp(types_to_llvm(node->noFilho->noIrmao->type), "i32")){
				convert_types(node->noFilho->noIrmao, "i32");
			}
			printf("%%%d = icmp ne i32 %%%d, 0\n", temporary_var, temporary_var-1);
		}
		temporary_var++;
	}
	printf("br label %%andend%d\n", and_cmp-1);
	printf("\nandend%d:\n", and_cmp-1);
	printf("%%%d = phi i1 [ false, %%andfalse%d ], [ %%%d, %%andtrue%d ]\n", temporary_var, and_cmp-1, temporary_var-1, and_cmp-1);
	temporary_var++;
	printf("%%%d = zext i1 %%%d to i32\n", temporary_var, temporary_var-1);
	temporary_var++;
}

void gerBitWiseAnd(no *node){
	int local_vars[2];
	char *first_type = node->noFilho->type;
	char *second_type = node->noFilho->noIrmao->type;
	char *result_type = types_to_llvm(node->type);
	if(0 == strcmp(node->noFilho->type, "Id")){
		printf("%%%d = load %s, %s* ", temporary_var, types_to_llvm(first_type), types_to_llvm(first_type));
		geracaoLLVM(node->noFilho);
		printf("\n");
		local_vars[0] = temporary_var;
		temporary_var++;
		if(strcmp(types_to_llvm(first_type), result_type)){
			convert_types(node->noFilho, result_type);
			local_vars[0] = temporary_var-1;
		}
	}
	if(0 == strcmp(node->noFilho->noIrmao->type, "Id")){
		printf("%%%d = load %s, %s* ", temporary_var, types_to_llvm(second_type), types_to_llvm(second_type));
		geracaoLLVM(node->noFilho->noIrmao);
		printf("\n");
		local_vars[1] = temporary_var;
		temporary_var++;
		if(strcmp(types_to_llvm(second_type), result_type)){
			convert_types(node->noFilho->noIrmao, result_type);
			local_vars[1] = temporary_var-1;
		}
	}
	if(0 == strcmp(node->noFilho->type, "Id") || 0 == strcmp(first_type, result_type)){ /* First is ID or different type */
		if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || 0 == strcmp(second_type, result_type)){ /* First + Second is ID or different type*/
			printf("%%%d = and %s %%%d, %%%d\n", temporary_var, result_type, local_vars[0], local_vars[1]);
		} else {
			printf("%%%d = and %s %%%d, ", temporary_var, result_type, local_vars[0]);
			geracaoLLVM(node->noFilho); 
			printf("\n");
		}
	} else if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || 0 == strcmp(second_type, result_type)){  /* Second is ID */
		printf("%%%d = and %s ", temporary_var, result_type);
		geracaoLLVM(node->noFilho); 
		printf(", %%%d\n", local_vars[1]);
	} else { /* None is ID */
		printf("%%%d = and %s ", temporary_var, result_type);
		geracaoLLVM(node->noFilho);
		printf(", ");
		geracaoLLVM(node->noFilho->noIrmao);
		printf("\n");
	}
	temporary_var++;
}

void gerBitWiseOr(no *node){
	int local_vars[2];
	char *first_type = node->noFilho->type;
	char *second_type = node->noFilho->noIrmao->type;
	char *result_type = types_to_llvm(node->type);
	if(0 == strcmp(node->noFilho->type, "Id")){
		printf("%%%d = load %s, %s* ", temporary_var, types_to_llvm(first_type), types_to_llvm(first_type));
		geracaoLLVM(node->noFilho);
		printf("\n");
		local_vars[0] = temporary_var;
		temporary_var++;
		if(strcmp(types_to_llvm(first_type), result_type)){
			convert_types(node->noFilho, result_type);
			local_vars[0] = temporary_var-1;
		}
	}
	if(0 == strcmp(node->noFilho->noIrmao->type, "Id")){
		printf("%%%d = load %s, %s* ", temporary_var, types_to_llvm(second_type), types_to_llvm(second_type));
		geracaoLLVM(node->noFilho->noIrmao);
		printf("\n");
		local_vars[1] = temporary_var;
		temporary_var++;
		if(strcmp(types_to_llvm(second_type), result_type)){
			convert_types(node->noFilho->noIrmao, result_type);
			local_vars[1] = temporary_var-1;
		}
	}
	if(0 == strcmp(node->noFilho->type, "Id") || 0 == strcmp(first_type, result_type)){ /* First is ID or different type */
		if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || 0 == strcmp(second_type, result_type)){ /* First + Second is ID or different type*/
			printf("%%%d = or %s %%%d, %%%d\n", temporary_var, result_type, local_vars[0], local_vars[1]);
		} else {
			printf("%%%d = or %s %%%d, ", temporary_var, result_type, local_vars[0]);
			geracaoLLVM(node->noFilho); 
			printf("\n");
		}
	} else if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || 0 == strcmp(second_type, result_type)){  /* Second is ID */
		printf("%%%d = or %s ", temporary_var, result_type);
		geracaoLLVM(node->noFilho); 
		printf(", %%%d\n", local_vars[1]);
	} else { /* None is ID */
		printf("%%%d = or %s ", temporary_var, result_type);
		geracaoLLVM(node->noFilho);
		printf(", ");
		geracaoLLVM(node->noFilho->noIrmao);
		printf("\n");
	}
	temporary_var++;
}

void gerBitWiseXor(no *node){
	int local_vars[2];
	char *first_type = node->noFilho->type;
	char *second_type = node->noFilho->noIrmao->type;
	char *result_type = types_to_llvm(node->type);
	if(0 == strcmp(node->noFilho->type, "Id")){
		printf("%%%d = load %s, %s* ", temporary_var, types_to_llvm(first_type), types_to_llvm(first_type));
		geracaoLLVM(node->noFilho);
		printf("\n");
		local_vars[0] = temporary_var;
		temporary_var++;
		if(strcmp(types_to_llvm(first_type), result_type)){
			convert_types(node->noFilho, result_type);
			local_vars[0] = temporary_var-1;
		}
	}
	if(0 == strcmp(node->noFilho->noIrmao->type, "Id")){
		printf("%%%d = load %s, %s* ", temporary_var, types_to_llvm(second_type), types_to_llvm(second_type));
		geracaoLLVM(node->noFilho->noIrmao);
		printf("\n");
		local_vars[1] = temporary_var;
		temporary_var++;
		if(strcmp(types_to_llvm(second_type), result_type)){
			convert_types(node->noFilho->noIrmao, result_type);
			local_vars[1] = temporary_var-1;
		}
	}
	if(0 == strcmp(node->noFilho->type, "Id") || 0 == strcmp(first_type, result_type)){ /* First is ID or different type */
		if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || 0 == strcmp(second_type, result_type)){ /* First + Second is ID or different type*/
			printf("%%%d = xor %s %%%d, %%%d\n", temporary_var, result_type, local_vars[0], local_vars[1]);
		} else {
			printf("%%%d = xor %s %%%d, ", temporary_var, result_type, local_vars[0]);
			geracaoLLVM(node->noFilho); 
			printf("\n");
		}
	} else if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || 0 == strcmp(second_type, result_type)){  /* Second is ID */
		printf("%%%d = xor %s ", temporary_var, result_type);
		geracaoLLVM(node->noFilho); 
		printf(", %%%d\n", local_vars[1]);
	} else { /* None is ID */
		printf("%%%d = xor %s ", temporary_var, result_type);
		geracaoLLVM(node->noFilho);
		printf(", ");
		geracaoLLVM(node->noFilho->noIrmao);
		printf("\n");
	}
	temporary_var++;
}

void gerEq(no *node){
	int local_vars[2];
	char *first_type = types_to_llvm(node->noFilho->type);
	char *second_type = types_to_llvm(node->noFilho->noIrmao->type);
	char *type = strdup(first_type);
	if(strcmp(first_type, second_type)){
		int greater = greater_type(first_type, second_type);
		if(greater == 1){
			if(0 == strcmp(node->noFilho->noIrmao->type, "Id")){
				printf("%%%d = load %s, %s* ", temporary_var, second_type, second_type);
				geracaoLLVM(node->noFilho->noIrmao);
				printf("\n");
				local_vars[1] = temporary_var;
				temporary_var++;
			} else if(is_expression(node->noFilho->noIrmao)){
				geracaoLLVM(node->noFilho->noIrmao);
				local_vars[1] = temporary_var-1;
			}
			type = strdup(first_type);
			convert_types(node->noFilho->noIrmao, first_type);
			local_vars[1] = temporary_var-1;
			if(0 == strcmp(node->noFilho->type, "Id")){
				printf("%%%d = load %s, %s* ", temporary_var, first_type, first_type);
				geracaoLLVM(node->noFilho);
				printf("\n");
				local_vars[0] = temporary_var;
				temporary_var++;
			} else if(is_expression(node->noFilho)){
				geracaoLLVM(node->noFilho);
				local_vars[0] = temporary_var-1;
			}
		} else {
			if(0 == strcmp(node->noFilho->type, "Id")){
				printf("%%%d = load %s, %s* ", temporary_var, first_type, first_type);
				geracaoLLVM(node->noFilho);
				printf("\n");
				local_vars[0] = temporary_var;
				temporary_var++;
			} else if(is_expression(node->noFilho)){
				geracaoLLVM(node->noFilho);
				local_vars[0] = temporary_var-1;
			}
			type = strdup(second_type);
			convert_types(node->noFilho, second_type);
			local_vars[0] = temporary_var-1;
			if(0 == strcmp(node->noFilho->noIrmao->type, "Id")){
				printf("%%%d = load %s, %s* ", temporary_var, second_type, second_type);
				geracaoLLVM(node->noFilho->noIrmao);
				printf("\n");
				local_vars[1] = temporary_var;
				temporary_var++;
			} else if(is_expression(node->noFilho->noIrmao)){
				geracaoLLVM(node->noFilho->noIrmao);
				local_vars[1] = temporary_var-1;
			}
		}
		if(0 == strcmp(type, "double")){
			if(greater == 1){
				if(0 == strcmp(node->noFilho->type, "Id") || is_expression(node->noFilho)){
					printf("%%%d = fcmp oeq double %%%d, %%%d\n", temporary_var, local_vars[0], local_vars[1]);
				} else { /* Is another terminal */
					printf("%%%d = fcmp oeq double %s, %%%d\n", temporary_var, node->noFilho->id, local_vars[1]);
				}
			} else {
				if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao)){
					printf("%%%d = fcmp oeq double %%%d, %%%d\n", temporary_var, local_vars[0], local_vars[1]);
				} else { /* Is another terminal */
					printf("%%%d = fcmp oeq double %%%d, %s\n", temporary_var, local_vars[0], node->noFilho->noIrmao->id);
				}
			}
		} else {
			if(greater == 1){
				if(0 == strcmp(node->noFilho->type, "Id") || is_expression(node->noFilho)){
					printf("%%%d = icmp eq %s %%%d, %%%d\n", temporary_var, type, local_vars[0], local_vars[1]);
				} else { /* Is another terminal */
					printf("%%%d = icmp eq %s %s, %%%d\n", temporary_var, type, node->noFilho->id, local_vars[1]);
				}
			} else {
				if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao)){
					printf("%%%d = icmp eq %s %%%d, %%%d\n", temporary_var, type, local_vars[0], local_vars[1]);
				} else { /* Is another terminal */
					printf("%%%d = icmp eq %s %%%d, %s\n", temporary_var, type, local_vars[0], node->noFilho->noIrmao->id);
				}
			}
		}
		temporary_var++;
	} else {
		if(0 == strcmp(node->noFilho->type, "Id")){
			printf("%%%d = load %s, %s* ", temporary_var, first_type, first_type);
			geracaoLLVM(node->noFilho);
			printf("\n");
			local_vars[0] = temporary_var;
			temporary_var++;
		} else if(is_expression(node->noFilho)){
			geracaoLLVM(node->noFilho);
			local_vars[0] = temporary_var-1;
		}
		if(0 == strcmp(node->noFilho->noIrmao->type, "Id")){
			printf("%%%d = load %s, %s* ", temporary_var, second_type, second_type);
			geracaoLLVM(node->noFilho->noIrmao);
			printf("\n");
			local_vars[1] = temporary_var;
			temporary_var++;
		} else if(is_expression(node->noFilho->noIrmao)){
			geracaoLLVM(node->noFilho->noIrmao);
			local_vars[1] = temporary_var-1;
		}
		if(0 == strcmp(type, "double")) {
			if(0 == strcmp(node->noFilho->type, "Id") || is_expression(node->noFilho)){
				if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao)){  /* First and Second are ID */
					printf("%%%d = fcmp oeq double %%%d, %%%d\n", temporary_var, local_vars[0], local_vars[1]);
				} else { /* First is ID */
					printf("%%%d = fcmp oeq double %%%d, %s\n", temporary_var, local_vars[0], node->noFilho->noIrmao->id);
				}
			} else if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao)){ /* Second is ID */
				printf("%%%d = fcmp oeq double %s, %%%d\n", temporary_var, node->noFilho->id, local_vars[1]);
			} else {
				printf("%%%d = fcmp oeq double %s, %s\n", temporary_var, node->noFilho->id, node->noFilho->noIrmao->id);
			}
		} else {
			if(0 == strcmp(node->noFilho->type, "Id") || is_expression(node->noFilho)){
				if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao)){  /* First and Second are ID */
					printf("%%%d = icmp eq %s %%%d, %%%d\n", temporary_var, type, local_vars[0], local_vars[1]);
				} else { /* First is ID */
					printf("%%%d = icmp eq double %%%d, %s\n", temporary_var, local_vars[0], node->noFilho->noIrmao->id);
				}
			} else if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao)){ /* Second is ID */
				printf("%%%d = icmp eq double %s, %%%d\n", temporary_var, node->noFilho->id, local_vars[1]);
			} else {
				printf("%%%d = icmp eq %s %s, %s\n", temporary_var, type, node->noFilho->id, node->noFilho->noIrmao->id);
			}
		}
		temporary_var++;
	}	
	printf("%%%d = zext i1 %%%d to i32\n", temporary_var, temporary_var-1);
	temporary_var++;
}

void gerNe(no *node){
	int local_vars[2];
	char *first_type = types_to_llvm(node->noFilho->type);
	char *second_type = types_to_llvm(node->noFilho->noIrmao->type);
	char *type = strdup(first_type);
	if(strcmp(first_type, second_type)){
		int greater = greater_type(first_type, second_type);
		if(greater == 1){
			if(0 == strcmp(node->noFilho->noIrmao->type, "Id")){
				printf("%%%d = load %s, %s* ", temporary_var, second_type, second_type);
				geracaoLLVM(node->noFilho->noIrmao);
				printf("\n");
				local_vars[1] = temporary_var;
				temporary_var++;
			} else if(is_expression(node->noFilho->noIrmao)){
				geracaoLLVM(node->noFilho->noIrmao);
				local_vars[1] = temporary_var-1;
			}
			type = strdup(first_type);
			convert_types(node->noFilho->noIrmao, first_type);
			local_vars[1] = temporary_var-1;
			if(0 == strcmp(node->noFilho->type, "Id")){
				printf("%%%d = load %s, %s* ", temporary_var, first_type, first_type);
				geracaoLLVM(node->noFilho);
				printf("\n");
				local_vars[0] = temporary_var;
				temporary_var++;
			} else if(is_expression(node->noFilho)){
				geracaoLLVM(node->noFilho);
				local_vars[0] = temporary_var-1;
			}
		} else {
			if(0 == strcmp(node->noFilho->type, "Id")){
				printf("%%%d = load %s, %s* ", temporary_var, first_type, first_type);
				geracaoLLVM(node->noFilho);
				printf("\n");
				local_vars[0] = temporary_var;
				temporary_var++;
			} else if(is_expression(node->noFilho)){
				geracaoLLVM(node->noFilho);
				local_vars[0] = temporary_var-1;
			}
			type = strdup(second_type);
			convert_types(node->noFilho, second_type);
			local_vars[0] = temporary_var-1;
			if(0 == strcmp(node->noFilho->noIrmao->type, "Id")){
				printf("%%%d = load %s, %s* ", temporary_var, second_type, second_type);
				geracaoLLVM(node->noFilho->noIrmao);
				printf("\n");
				local_vars[1] = temporary_var;
				temporary_var++;
			} else if(is_expression(node->noFilho->noIrmao)){
				geracaoLLVM(node->noFilho->noIrmao);
				local_vars[1] = temporary_var-1;
			}
		}
		if(0 == strcmp(type, "double")){
			if(greater == 1){
				if(0 == strcmp(node->noFilho->type, "Id") || is_expression(node->noFilho)){
					printf("%%%d = fcmp une double %%%d, %%%d\n", temporary_var, local_vars[0], local_vars[1]);
				} else { /* Is another terminal */
					printf("%%%d = fcmp une double %s, %%%d\n", temporary_var, node->noFilho->id, local_vars[1]);
				}
			} else {
				if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao)){
					printf("%%%d = fcmp une double %%%d, %%%d\n", temporary_var, local_vars[0], local_vars[1]);
				} else { /* Is another terminal */
					printf("%%%d = fcmp une double %%%d, %s\n", temporary_var, local_vars[0], node->noFilho->noIrmao->id);
				}
			}
		} else {
			if(greater == 1){
				if(0 == strcmp(node->noFilho->type, "Id") || is_expression(node->noFilho)){
					printf("%%%d = icmp ne %s %%%d, %%%d\n", temporary_var, type, local_vars[0], local_vars[1]);
				} else { /* Is another terminal */
					printf("%%%d = icmp ne %s %s, %%%d\n", temporary_var, type, node->noFilho->id, local_vars[1]);
				}
			} else {
				if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao)){
					printf("%%%d = icmp ne %s %%%d, %%%d\n", temporary_var, type, local_vars[0], local_vars[1]);
				} else { /* Is another terminal */
					printf("%%%d = icmp ne %s %%%d, %s\n", temporary_var, type, local_vars[0], node->noFilho->noIrmao->id);
				}
			}
		}
		temporary_var++;
	} else {
		if(0 == strcmp(node->noFilho->type, "Id")){
			printf("%%%d = load %s, %s* ", temporary_var, first_type, first_type);
			geracaoLLVM(node->noFilho);
			printf("\n");
			local_vars[0] = temporary_var;
			temporary_var++;
		} else if(is_expression(node->noFilho)){
			geracaoLLVM(node->noFilho);
			local_vars[0] = temporary_var-1;
		}
		if(0 == strcmp(node->noFilho->noIrmao->type, "Id")){
			printf("%%%d = load %s, %s* ", temporary_var, second_type, second_type);
			geracaoLLVM(node->noFilho->noIrmao);
			printf("\n");
			local_vars[1] = temporary_var;
			temporary_var++;
		} else if(is_expression(node->noFilho->noIrmao)){
			geracaoLLVM(node->noFilho->noIrmao);
			local_vars[1] = temporary_var-1;
		}
		if(0 == strcmp(type, "double")) {
			if(0 == strcmp(node->noFilho->type, "Id") || is_expression(node->noFilho)){
				if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao)){  /* First and Second are ID */
					printf("%%%d = fcmp une double %%%d, %%%d\n", temporary_var, local_vars[0], local_vars[1]);
				} else { /* First is ID */
					printf("%%%d = fcmp une double %%%d, %s\n", temporary_var, local_vars[0], node->noFilho->noIrmao->id);
				}
			} else if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao)){ /* Second is ID */
				printf("%%%d = fcmp une double %s, %%%d\n", temporary_var, node->noFilho->id, local_vars[1]);
			} else {
				printf("%%%d = fcmp une double %s, %s\n", temporary_var, node->noFilho->id, node->noFilho->noIrmao->id);
			}
		} else {
			if(0 == strcmp(node->noFilho->type, "Id") || is_expression(node->noFilho)){
				if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao)){  /* First and Second are ID */
					printf("%%%d = icmp ne %s %%%d, %%%d\n", temporary_var, type, local_vars[0], local_vars[1]);
				} else { /* First is ID */
					printf("%%%d = icmp ne double %%%d, %s\n", temporary_var, local_vars[0], node->noFilho->noIrmao->id);
				}
			} else if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao)){ /* Second is ID */
				printf("%%%d = icmp ne double %s, %%%d\n", temporary_var, node->noFilho->id, local_vars[1]);
			} else {
				printf("%%%d = icmp ne %s %s, %s\n", temporary_var, type, node->noFilho->id, node->noFilho->noIrmao->id);
			}
		}
		temporary_var++;
	}	
	printf("%%%d = zext i1 %%%d to i32\n", temporary_var, temporary_var-1);
	temporary_var++;
}

void gerLe(no *node){
	int local_vars[2];
	char *first_type = types_to_llvm(node->noFilho->type);
	char *second_type = types_to_llvm(node->noFilho->noIrmao->type);
	char *type = strdup(first_type);
	if(strcmp(first_type, second_type)){
		int greater = greater_type(first_type, second_type);
		if(greater == 1){
			if(0 == strcmp(node->noFilho->noIrmao->type, "Id")){
				printf("%%%d = load %s, %s* ", temporary_var, second_type, second_type);
				geracaoLLVM(node->noFilho->noIrmao);
				printf("\n");
				local_vars[1] = temporary_var;
				temporary_var++;
			} else if(is_expression(node->noFilho->noIrmao)){
				geracaoLLVM(node->noFilho->noIrmao);
				local_vars[1] = temporary_var-1;
			}
			type = strdup(first_type);
			convert_types(node->noFilho->noIrmao, first_type);
			local_vars[1] = temporary_var-1;
			if(0 == strcmp(node->noFilho->type, "Id")){
				printf("%%%d = load %s, %s* ", temporary_var, first_type, first_type);
				geracaoLLVM(node->noFilho);
				printf("\n");
				local_vars[0] = temporary_var;
				temporary_var++;
			} else if(is_expression(node->noFilho)){
				geracaoLLVM(node->noFilho);
				local_vars[0] = temporary_var-1;
			}
		} else {
			if(0 == strcmp(node->noFilho->type, "Id")){
				printf("%%%d = load %s, %s* ", temporary_var, first_type, first_type);
				geracaoLLVM(node->noFilho);
				printf("\n");
				local_vars[0] = temporary_var;
				temporary_var++;
			} else if(is_expression(node->noFilho)){
				geracaoLLVM(node->noFilho);
				local_vars[0] = temporary_var-1;
			}
			type = strdup(second_type);
			convert_types(node->noFilho, second_type);
			local_vars[0] = temporary_var-1;
			if(0 == strcmp(node->noFilho->noIrmao->type, "Id")){
				printf("%%%d = load %s, %s* ", temporary_var, second_type, second_type);
				geracaoLLVM(node->noFilho->noIrmao);
				printf("\n");
				local_vars[1] = temporary_var;
				temporary_var++;
			} else if(is_expression(node->noFilho->noIrmao)){
				geracaoLLVM(node->noFilho->noIrmao);
				local_vars[1] = temporary_var-1;
			}
		}
		if(0 == strcmp(type, "double")){
			if(greater == 1){
				if(0 == strcmp(node->noFilho->type, "Id") || is_expression(node->noFilho)){
					printf("%%%d = fcmp ole double %%%d, %%%d\n", temporary_var, local_vars[0], local_vars[1]);
				} else { /* Is another terminal */
					printf("%%%d = fcmp ole double %s, %%%d\n", temporary_var, node->noFilho->id, local_vars[1]);
				}
			} else {
				if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao)){
					printf("%%%d = fcmp ole double %%%d, %%%d\n", temporary_var, local_vars[0], local_vars[1]);
				} else { /* Is another terminal */
					printf("%%%d = fcmp ole double %%%d, %s\n", temporary_var, local_vars[0], node->noFilho->noIrmao->id);
				}
			}
		} else {
			if(greater == 1){
				if(0 == strcmp(node->noFilho->type, "Id") || is_expression(node->noFilho)){
					printf("%%%d = icmp sle %s %%%d, %%%d\n", temporary_var, type, local_vars[0], local_vars[1]);
				} else { /* Is another terminal */
					printf("%%%d = icmp sle %s %s, %%%d\n", temporary_var, type, node->noFilho->id, local_vars[1]);
				}
			} else {
				if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao)){
					printf("%%%d = icmp sle %s %%%d, %%%d\n", temporary_var, type, local_vars[0], local_vars[1]);
				} else { /* Is another terminal */
					printf("%%%d = icmp sle %s %%%d, %s\n", temporary_var, type, local_vars[0], node->noFilho->noIrmao->id);
				}
			}
		}
		temporary_var++;
	} else {
		if(0 == strcmp(node->noFilho->type, "Id")){
			printf("%%%d = load %s, %s* ", temporary_var, first_type, first_type);
			geracaoLLVM(node->noFilho);
			printf("\n");
			local_vars[0] = temporary_var;
			temporary_var++;
		} else if(is_expression(node->noFilho)){
			geracaoLLVM(node->noFilho);
			local_vars[0] = temporary_var-1;
		}
		if(0 == strcmp(node->noFilho->noIrmao->type, "Id")){
			printf("%%%d = load %s, %s* ", temporary_var, second_type, second_type);
			geracaoLLVM(node->noFilho->noIrmao);
			printf("\n");
			local_vars[1] = temporary_var;
			temporary_var++;
		} else if(is_expression(node->noFilho->noIrmao)){
			geracaoLLVM(node->noFilho->noIrmao);
			local_vars[1] = temporary_var-1;
		}
		if(0 == strcmp(type, "double")) {
			if(0 == strcmp(node->noFilho->type, "Id") || is_expression(node->noFilho)){
				if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao)){  /* First and Second are ID */
					printf("%%%d = fcmp ole double %%%d, %%%d\n", temporary_var, local_vars[0], local_vars[1]);
				} else { /* First is ID */
					printf("%%%d = fcmp ole double %%%d, %s\n", temporary_var, local_vars[0], node->noFilho->noIrmao->id);
				}
			} else if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao)){ /* Second is ID */
				printf("%%%d = fcmp ole double %s, %%%d\n", temporary_var, node->noFilho->id, local_vars[1]);
			} else {
				printf("%%%d = fcmp ole double %s, %s\n", temporary_var, node->noFilho->id, node->noFilho->noIrmao->id);
			}
		} else {
			if(0 == strcmp(node->noFilho->type, "Id") || is_expression(node->noFilho)){
				if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao)){  /* First and Second are ID */
					printf("%%%d = icmp sle %s %%%d, %%%d\n", temporary_var, type, local_vars[0], local_vars[1]);
				} else { /* First is ID */
					printf("%%%d = icmp sle double %%%d, %s\n", temporary_var, local_vars[0], node->noFilho->noIrmao->id);
				}
			} else if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao)){ /* Second is ID */
				printf("%%%d = icmp sle double %s, %%%d\n", temporary_var, node->noFilho->id, local_vars[1]);
			} else {
				printf("%%%d = icmp sle %s %s, %s\n", temporary_var, type, node->noFilho->id, node->noFilho->noIrmao->id);
			}
		}
		temporary_var++;
	}	
	printf("%%%d = zext i1 %%%d to i32\n", temporary_var, temporary_var-1);
	temporary_var++;
}

void gerGe(no *node){
	int local_vars[2];
	char *first_type = types_to_llvm(node->noFilho->type);
	char *second_type = types_to_llvm(node->noFilho->noIrmao->type);
	char *type = strdup(first_type);
	if(strcmp(first_type, second_type)){
		int greater = greater_type(first_type, second_type);
		if(greater == 1){
			if(0 == strcmp(node->noFilho->noIrmao->type, "Id")){
				printf("%%%d = load %s, %s* ", temporary_var, second_type, second_type);
				geracaoLLVM(node->noFilho->noIrmao);
				printf("\n");
				local_vars[1] = temporary_var;
				temporary_var++;
			} else if(is_expression(node->noFilho->noIrmao)){
				geracaoLLVM(node->noFilho->noIrmao);
				local_vars[1] = temporary_var-1;
			}
			type = strdup(first_type);
			convert_types(node->noFilho->noIrmao, first_type);
			local_vars[1] = temporary_var-1;
			if(0 == strcmp(node->noFilho->type, "Id")){
				printf("%%%d = load %s, %s* ", temporary_var, first_type, first_type);
				geracaoLLVM(node->noFilho);
				printf("\n");
				local_vars[0] = temporary_var;
				temporary_var++;
			} else if(is_expression(node->noFilho)){
				geracaoLLVM(node->noFilho);
				local_vars[0] = temporary_var-1;
			}
		} else {
			if(0 == strcmp(node->noFilho->type, "Id")){
				printf("%%%d = load %s, %s* ", temporary_var, first_type, first_type);
				geracaoLLVM(node->noFilho);
				printf("\n");
				local_vars[0] = temporary_var;
				temporary_var++;
			} else if(is_expression(node->noFilho)){
				geracaoLLVM(node->noFilho);
				local_vars[0] = temporary_var-1;
			}
			type = strdup(second_type);
			convert_types(node->noFilho, second_type);
			local_vars[0] = temporary_var-1;
			if(0 == strcmp(node->noFilho->noIrmao->type, "Id")){
				printf("%%%d = load %s, %s* ", temporary_var, second_type, second_type);
				geracaoLLVM(node->noFilho->noIrmao);
				printf("\n");
				local_vars[1] = temporary_var;
				temporary_var++;
			} else if(is_expression(node->noFilho->noIrmao)){
				geracaoLLVM(node->noFilho->noIrmao);
				local_vars[1] = temporary_var-1;
			}
		}
		if(0 == strcmp(type, "double")){
			if(greater == 1){
				if(0 == strcmp(node->noFilho->type, "Id") || is_expression(node->noFilho)){
					printf("%%%d = fcmp oge double %%%d, %%%d\n", temporary_var, local_vars[0], local_vars[1]);
				} else { /* Is another terminal */
					printf("%%%d = fcmp oge double %s, %%%d\n", temporary_var, node->noFilho->id, local_vars[1]);
				}
			} else {
				if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao)){
					printf("%%%d = fcmp oge double %%%d, %%%d\n", temporary_var, local_vars[0], local_vars[1]);
				} else { /* Is another terminal */
					printf("%%%d = fcmp oge double %%%d, %s\n", temporary_var, local_vars[0], node->noFilho->noIrmao->id);
				}
			}
		} else {
			if(greater == 1){
				if(0 == strcmp(node->noFilho->type, "Id") || is_expression(node->noFilho)){
					printf("%%%d = icmp sge %s %%%d, %%%d\n", temporary_var, type, local_vars[0], local_vars[1]);
				} else { /* Is another terminal */
					printf("%%%d = icmp sge %s %s, %%%d\n", temporary_var, type, node->noFilho->id, local_vars[1]);
				}
			} else {
				if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao)){
					printf("%%%d = icmp sge %s %%%d, %%%d\n", temporary_var, type, local_vars[0], local_vars[1]);
				} else { /* Is another terminal */
					printf("%%%d = icmp sge %s %%%d, %s\n", temporary_var, type, local_vars[0], node->noFilho->noIrmao->id);
				}
			}
		}
		temporary_var++;
	} else {
		if(0 == strcmp(node->noFilho->type, "Id")){
			printf("%%%d = load %s, %s* ", temporary_var, first_type, first_type);
			geracaoLLVM(node->noFilho);
			printf("\n");
			local_vars[0] = temporary_var;
			temporary_var++;
		} else if(is_expression(node->noFilho)){
			geracaoLLVM(node->noFilho);
			local_vars[0] = temporary_var-1;
		}
		if(0 == strcmp(node->noFilho->noIrmao->type, "Id")){
			printf("%%%d = load %s, %s* ", temporary_var, second_type, second_type);
			geracaoLLVM(node->noFilho->noIrmao);
			printf("\n");
			local_vars[1] = temporary_var;
			temporary_var++;
		} else if(is_expression(node->noFilho->noIrmao)){
			geracaoLLVM(node->noFilho->noIrmao);
			local_vars[1] = temporary_var-1;
		}
		if(0 == strcmp(type, "double")) {
			if(0 == strcmp(node->noFilho->type, "Id") || is_expression(node->noFilho)){
				if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao)){  /* First and Second are ID */
					printf("%%%d = fcmp oge double %%%d, %%%d\n", temporary_var, local_vars[0], local_vars[1]);
				} else { /* First is ID */
					printf("%%%d = fcmp oge double %%%d, %s\n", temporary_var, local_vars[0], node->noFilho->noIrmao->id);
				}
			} else if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao)){ /* Second is ID */
				printf("%%%d = fcmp oge double %s, %%%d\n", temporary_var, node->noFilho->id, local_vars[1]);
			} else {
				printf("%%%d = fcmp oge double %s, %s\n", temporary_var, node->noFilho->id, node->noFilho->noIrmao->id);
			}
		} else {
			if(0 == strcmp(node->noFilho->type, "Id") || is_expression(node->noFilho)){
				if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao)){  /* First and Second are ID */
					printf("%%%d = icmp sge %s %%%d, %%%d\n", temporary_var, type, local_vars[0], local_vars[1]);
				} else { /* First is ID */
					printf("%%%d = icmp sge double %%%d, %s\n", temporary_var, local_vars[0], node->noFilho->noIrmao->id);
				}
			} else if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao)){ /* Second is ID */
				printf("%%%d = icmp sge double %s, %%%d\n", temporary_var, node->noFilho->id, local_vars[1]);
			} else {
				printf("%%%d = icmp sge %s %s, %s\n", temporary_var, type, node->noFilho->id, node->noFilho->noIrmao->id);
			}
		}
		temporary_var++;
	}	
	printf("%%%d = zext i1 %%%d to i32\n", temporary_var, temporary_var-1);
	temporary_var++;
}

void gerLt(no *node){
	int local_vars[2];
	char *first_type = types_to_llvm(node->noFilho->type);
	char *second_type = types_to_llvm(node->noFilho->noIrmao->type);
	char *type = strdup(first_type);
	if(strcmp(first_type, second_type)){
		int greater = greater_type(first_type, second_type);
		if(greater == 1){
			if(0 == strcmp(node->noFilho->noIrmao->type, "Id")){
				printf("%%%d = load %s, %s* ", temporary_var, second_type, second_type);
				geracaoLLVM(node->noFilho->noIrmao);
				printf("\n");
				local_vars[1] = temporary_var;
				temporary_var++;
			} else if(is_expression(node->noFilho->noIrmao)){
				geracaoLLVM(node->noFilho->noIrmao);
				local_vars[1] = temporary_var-1;
			}
			type = strdup(first_type);
			convert_types(node->noFilho->noIrmao, first_type);
			local_vars[1] = temporary_var-1;
			if(0 == strcmp(node->noFilho->type, "Id")){
				printf("%%%d = load %s, %s* ", temporary_var, first_type, first_type);
				geracaoLLVM(node->noFilho);
				printf("\n");
				local_vars[0] = temporary_var;
				temporary_var++;
			} else if(is_expression(node->noFilho)){
				geracaoLLVM(node->noFilho);
				local_vars[0] = temporary_var-1;
			}
		} else {
			if(0 == strcmp(node->noFilho->type, "Id")){
				printf("%%%d = load %s, %s* ", temporary_var, first_type, first_type);
				geracaoLLVM(node->noFilho);
				printf("\n");
				local_vars[0] = temporary_var;
				temporary_var++;
			} else if(is_expression(node->noFilho)){
				geracaoLLVM(node->noFilho);
				local_vars[0] = temporary_var-1;
			}
			type = strdup(second_type);
			convert_types(node->noFilho, second_type);
			local_vars[0] = temporary_var-1;
			if(0 == strcmp(node->noFilho->noIrmao->type, "Id")){
				printf("%%%d = load %s, %s* ", temporary_var, second_type, second_type);
				geracaoLLVM(node->noFilho->noIrmao);
				printf("\n");
				local_vars[1] = temporary_var;
				temporary_var++;
			} else if(is_expression(node->noFilho->noIrmao)){
				geracaoLLVM(node->noFilho->noIrmao);
				local_vars[1] = temporary_var-1;
			}
		}
		if(0 == strcmp(type, "double")){
			if(greater == 1){
				if(0 == strcmp(node->noFilho->type, "Id") || is_expression(node->noFilho)){
					printf("%%%d = fcmp olt double %%%d, %%%d\n", temporary_var, local_vars[0], local_vars[1]);
				} else { /* Is another terminal */
					printf("%%%d = fcmp olt double %s, %%%d\n", temporary_var, node->noFilho->id, local_vars[1]);
				}
			} else {
				if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao)){
					printf("%%%d = fcmp olt double %%%d, %%%d\n", temporary_var, local_vars[0], local_vars[1]);
				} else { /* Is another terminal */
					printf("%%%d = fcmp olt double %%%d, %s\n", temporary_var, local_vars[0], node->noFilho->noIrmao->id);
				}
			}
		} else {
			if(greater == 1){
				if(0 == strcmp(node->noFilho->type, "Id") || is_expression(node->noFilho)){
					printf("%%%d = icmp slt %s %%%d, %%%d\n", temporary_var, type, local_vars[0], local_vars[1]);
				} else { /* Is another terminal */
					printf("%%%d = icmp slt %s %s, %%%d\n", temporary_var, type, node->noFilho->id, local_vars[1]);
				}
			} else {
				if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao)){
					printf("%%%d = icmp slt %s %%%d, %%%d\n", temporary_var, type, local_vars[0], local_vars[1]);
				} else { /* Is another terminal */
					printf("%%%d = icmp slt %s %%%d, %s\n", temporary_var, type, local_vars[0], node->noFilho->noIrmao->id);
				}
			}
		}
		temporary_var++;
	} else {
		if(0 == strcmp(node->noFilho->type, "Id")){
			printf("%%%d = load %s, %s* ", temporary_var, first_type, first_type);
			geracaoLLVM(node->noFilho);
			printf("\n");
			local_vars[0] = temporary_var;
			temporary_var++;
		} else if(is_expression(node->noFilho)){
			geracaoLLVM(node->noFilho);
			local_vars[0] = temporary_var-1;
		}
		if(0 == strcmp(node->noFilho->noIrmao->type, "Id")){
			printf("%%%d = load %s, %s* ", temporary_var, second_type, second_type);
			geracaoLLVM(node->noFilho->noIrmao);
			printf("\n");
			local_vars[1] = temporary_var;
			temporary_var++;
		} else if(is_expression(node->noFilho->noIrmao)){
			geracaoLLVM(node->noFilho->noIrmao);
			local_vars[1] = temporary_var-1;
		}
		if(0 == strcmp(type, "double")) {
			if(0 == strcmp(node->noFilho->type, "Id") || is_expression(node->noFilho)){
				if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao)){  /* First and Second are ID */
					printf("%%%d = fcmp olt double %%%d, %%%d\n", temporary_var, local_vars[0], local_vars[1]);
				} else { /* First is ID */
					printf("%%%d = fcmp olt double %%%d, %s\n", temporary_var, local_vars[0], node->noFilho->noIrmao->id);
				}
			} else if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao)){ /* Second is ID */
				printf("%%%d = fcmp olt double %s, %%%d\n", temporary_var, node->noFilho->id, local_vars[1]);
			} else {
				printf("%%%d = fcmp olt double %s, %s\n", temporary_var, node->noFilho->id, node->noFilho->noIrmao->id);
			}
		} else {
			if(0 == strcmp(node->noFilho->type, "Id") || is_expression(node->noFilho)){
				if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao)){  /* First and Second are ID */
					printf("%%%d = icmp slt %s %%%d, %%%d\n", temporary_var, type, local_vars[0], local_vars[1]);
				} else { /* First is ID */
					printf("%%%d = icmp slt double %%%d, %s\n", temporary_var, local_vars[0], node->noFilho->noIrmao->id);
				}
			} else if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao)){ /* Second is ID */
				printf("%%%d = icmp slt double %s, %%%d\n", temporary_var, node->noFilho->id, local_vars[1]);
			} else {
				printf("%%%d = icmp slt %s %s, %s\n", temporary_var, type, node->noFilho->id, node->noFilho->noIrmao->id);
			}
		}
		temporary_var++;
	}	
	printf("%%%d = zext i1 %%%d to i32\n", temporary_var, temporary_var-1);
	temporary_var++;
}

void gerGt(no *node){
	int local_vars[2];
	char *first_type = types_to_llvm(node->noFilho->type);
	char *second_type = types_to_llvm(node->noFilho->noIrmao->type);
	char *type = strdup(first_type);
	if(strcmp(first_type, second_type)){
		int greater = greater_type(first_type, second_type);
		if(greater == 1){
			if(0 == strcmp(node->noFilho->noIrmao->type, "Id")){
				printf("%%%d = load %s, %s* ", temporary_var, second_type, second_type);
				geracaoLLVM(node->noFilho->noIrmao);
				printf("\n");
				local_vars[1] = temporary_var;
				temporary_var++;
			} else if(is_expression(node->noFilho->noIrmao)){
				geracaoLLVM(node->noFilho->noIrmao);
				local_vars[1] = temporary_var-1;
			}
			type = strdup(first_type);
			convert_types(node->noFilho->noIrmao, first_type);
			local_vars[1] = temporary_var-1;
			if(0 == strcmp(node->noFilho->type, "Id")){
				printf("%%%d = load %s, %s* ", temporary_var, first_type, first_type);
				geracaoLLVM(node->noFilho);
				printf("\n");
				local_vars[0] = temporary_var;
				temporary_var++;
			} else if(is_expression(node->noFilho)){
				geracaoLLVM(node->noFilho);
				local_vars[0] = temporary_var-1;
			}
		} else {
			if(0 == strcmp(node->noFilho->type, "Id")){
				printf("%%%d = load %s, %s* ", temporary_var, first_type, first_type);
				geracaoLLVM(node->noFilho);
				printf("\n");
				local_vars[0] = temporary_var;
				temporary_var++;
			} else if(is_expression(node->noFilho)){
				geracaoLLVM(node->noFilho);
				local_vars[0] = temporary_var-1;
			}
			type = strdup(second_type);
			convert_types(node->noFilho, second_type);
			local_vars[0] = temporary_var-1;
			if(0 == strcmp(node->noFilho->noIrmao->type, "Id")){
				printf("%%%d = load %s, %s* ", temporary_var, second_type, second_type);
				geracaoLLVM(node->noFilho->noIrmao);
				printf("\n");
				local_vars[1] = temporary_var;
				temporary_var++;
			} else if(is_expression(node->noFilho->noIrmao)){
				geracaoLLVM(node->noFilho->noIrmao);
				local_vars[1] = temporary_var-1;
			}
		}
		if(0 == strcmp(type, "double")){
			if(greater == 1){
				if(0 == strcmp(node->noFilho->type, "Id") || is_expression(node->noFilho)){
					printf("%%%d = fcmp ogt double %%%d, %%%d\n", temporary_var, local_vars[0], local_vars[1]);
				} else { /* Is another terminal */
					printf("%%%d = fcmp ogt double %s, %%%d\n", temporary_var, node->noFilho->id, local_vars[1]);
				}
			} else {
				if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao)){
					printf("%%%d = fcmp ogt double %%%d, %%%d\n", temporary_var, local_vars[0], local_vars[1]);
				} else { /* Is another terminal */
					printf("%%%d = fcmp ogt double %%%d, %s\n", temporary_var, local_vars[0], node->noFilho->noIrmao->id);
				}
			}
		} else {
			if(greater == 1){
				if(0 == strcmp(node->noFilho->type, "Id") || is_expression(node->noFilho)){
					printf("%%%d = icmp sgt %s %%%d, %%%d\n", temporary_var, type, local_vars[0], local_vars[1]);
				} else { /* Is another terminal */
					printf("%%%d = icmp sgt %s %s, %%%d\n", temporary_var, type, node->noFilho->id, local_vars[1]);
				}
			} else {
				if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao)){
					printf("%%%d = icmp sgt %s %%%d, %%%d\n", temporary_var, type, local_vars[0], local_vars[1]);
				} else { /* Is another terminal */
					printf("%%%d = icmp sgt %s %%%d, %s\n", temporary_var, type, local_vars[0], node->noFilho->noIrmao->id);
				}
			}
		}
		temporary_var++;
	} else {
		if(0 == strcmp(node->noFilho->type, "Id")){
			printf("%%%d = load %s, %s* ", temporary_var, first_type, first_type);
			geracaoLLVM(node->noFilho);
			printf("\n");
			local_vars[0] = temporary_var;
			temporary_var++;
		} else if(is_expression(node->noFilho)){
			geracaoLLVM(node->noFilho);
			local_vars[0] = temporary_var-1;
		}
		if(0 == strcmp(node->noFilho->noIrmao->type, "Id")){
			printf("%%%d = load %s, %s* ", temporary_var, second_type, second_type);
			geracaoLLVM(node->noFilho->noIrmao);
			printf("\n");
			local_vars[1] = temporary_var;
			temporary_var++;
		} else if(is_expression(node->noFilho->noIrmao)){
			geracaoLLVM(node->noFilho->noIrmao);
			local_vars[1] = temporary_var-1;
		}
		if(0 == strcmp(type, "double")) {
			if(0 == strcmp(node->noFilho->type, "Id") || is_expression(node->noFilho)){
				if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao)){  /* First and Second are ID */
					printf("%%%d = fcmp ogt double %%%d, %%%d\n", temporary_var, local_vars[0], local_vars[1]);
				} else { /* First is ID */
					printf("%%%d = fcmp ogt double %%%d, %s\n", temporary_var, local_vars[0], node->noFilho->noIrmao->id);
				}
			} else if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao)){ /* Second is ID */
				printf("%%%d = fcmp ogt double %s, %%%d\n", temporary_var, node->noFilho->id, local_vars[1]);
			} else {
				printf("%%%d = fcmp ogt double %s, %s\n", temporary_var, node->noFilho->id, node->noFilho->noIrmao->id);
			}
		} else {
			if(0 == strcmp(node->noFilho->type, "Id") || is_expression(node->noFilho)){
				if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao)){  /* First and Second are ID */
					printf("%%%d = icmp sgt %s %%%d, %%%d\n", temporary_var, type, local_vars[0], local_vars[1]);
				} else { /* First is ID */
					printf("%%%d = icmp sgt double %%%d, %s\n", temporary_var, local_vars[0], node->noFilho->noIrmao->id);
				}
			} else if(0 == strcmp(node->noFilho->noIrmao->type, "Id") || is_expression(node->noFilho->noIrmao)){ /* Second is ID */
				printf("%%%d = icmp sgt double %s, %%%d\n", temporary_var, node->noFilho->id, local_vars[1]);
			} else {
				printf("%%%d = icmp sgt %s %s, %s\n", temporary_var, type, node->noFilho->id, node->noFilho->noIrmao->id);
			}
		}
		temporary_var++;
	}	
	printf("%%%d = zext i1 %%%d to i32\n", temporary_var, temporary_var-1);
	temporary_var++;
}

void gerNot(no *node){
	char *type = types_to_llvm(node->noFilho->type);
	if(0 == strcmp(node->noFilho->type, "Id")){
		printf("%%%d = load %s, %s* ", temporary_var, type, type);
		geracaoLLVM(node->noFilho);
		printf("\n");
		temporary_var++;
	} else if(is_expression(node->noFilho)){
		geracaoLLVM(node->noFilho);
	}
	if(0 == strcmp(type, "double")){
		if(0 == strcmp(node->noFilho->type, "Id") || is_expression(node->noFilho)) {
			printf("%%%d = fcmp une double %%%d, 0.000000e+00\n", temporary_var, temporary_var-1);
		} else {
			printf("%%%d = fcmp une double %s, 0.000000e+00\n", temporary_var, node->noFilho->id);
		}
	} else {
		if(0 == strcmp(node->noFilho->type, "Id") || is_expression(node->noFilho)) {
			printf("%%%d = icmp ne %s %%%d, 0\n", temporary_var, type, temporary_var-1);
		} else {
			printf("%%%d = icmp ne %s %s, 0\n", temporary_var, type, node->noFilho->id);
		}
	}
	temporary_var++;
	printf("%%%d = xor i1 %%%d, true\n", temporary_var, temporary_var-1);
	temporary_var++;
	printf("%%%d = zext i1 %%%d to i32\n", temporary_var, temporary_var-1);
	temporary_var++;
}

int greater_type(char *first, char *second){
	if(0 == strcmp(second, "double") && strcmp(first, "double")){
		return 2;
	} else if(0 == strcmp(first, "double") && strcmp(second, "double")){
		return 1;
	} else if(0 == strcmp(first, "i32") && (0 == strcmp(second, "i16") || 0 == strcmp(second, "i8"))){
		return 1;
	} else if(0 == strcmp(second, "i32") && (0 == strcmp(first, "i16") || 0 == strcmp(first, "i8"))){
		return 2;
	} else if(0 == strcmp(first, "i16") && 0 == strcmp(second, "i8")){
		return 1;
	} else if(0 == strcmp(second, "i16") && 0 == strcmp(first, "i8")){
		return 2;
	}
	return -1;
}

